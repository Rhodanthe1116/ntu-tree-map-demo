{"version":3,"sources":["theme.js","components/GoogleMap.js","components/TreeInfoWindow.js","components/TreeMarker.js","components/MarkerInfoWindowMap.js","components/TreeAppBar.js","components/SpeedDials.js","components/FloatingNavgationBar.js","components/TreeDetail.js","components/TreeDetailDrawer.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","green","secondary","yellow","text","typography","fontFamily","join","h3","fontWeight","h4","marginTop","marginBottom","useStyles","makeStyles","googleMap","width","height","cursor","zIndex","GoogleMap","children","props","classes","className","bootstrapURLKeys","key","options","draggableCursor","defaultProps","card","maxWidth","media","TreeInfoWindow","tree","onLearnMoreClick","Card","showStatus","showThumbs","CardMedia","image","id","title","chineseTreeName","CardContent","Typography","variant","growthFrom","gutterBottom","englishTreeName","split","color","component","CardActions","Button","size","onClick","scientificTreeName","season","isCommon","marker","TreeMarker","show","useState","anchorEl","setAnchorEl","open","setOpen","undefined","handleMouseLeave","event","onMouseLeave","currentTarget","onMouseEnter","Popper","transition","TransitionProps","Fade","ntuLocation","lat","lng","NTU_CENTER","MarkerInfoWindowMap","places","setPlaces","useEffect","fetch","then","response","json","data","results","forEach","result","Math","random","isEmpty","defaultZoom","defaultCenter","map","place","menuButton","marginRight","spacing","flexGrow","speedDial","margin","backdrop","pointerEvents","speedDialSelected","SpeedDials","icon","actions","React","direction","hidden","handleClose","Backdrop","SpeedDial","ariaLabel","style","onClose","onOpen","FabProps","action","SpeedDialAction","name","tooltipTitle","floatingNavgationBar","display","flexDirection","position","marginLeft","FloatingNavgationBar","Zoom","in","Fab","aria-label","detail","paddingBottom","divider","TreeDetail","Container","role","paragraph","Divider","List","dense","ListItem","button","ListItemIcon","ListItemText","treePlaceholder","co","createTime","treeHeight","treeCrownHeight","treePath","treePerimeter","TreeDetailDrawer","top","left","bottom","right","Drawer","anchor","root","main","App","drawerOpen","setDrawerOpen","selectedTree","setSelectedTree","ThemeProvider","CssBaseline","Box","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29e98f86.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\nimport green from '@material-ui/core/colors/green';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: green,\r\n        secondary: yellow,\r\n        text: {\r\n            primary: '#424242',\r\n        }\r\n    },\r\n    typography: {\r\n        fontFamily: [\r\n            'Roboto',\r\n            '-apple-system',\r\n            'BlinkMacSystemFont',\r\n            '\"Segoe UI\"',\r\n            '\"Helvetica Neue\"',\r\n            'Arial',\r\n            '\"Noto Sans TC\"',\r\n            '\"Noto Sans CJK TC\"',\r\n            '\"LiHei Pro\"',\r\n            '\"Heiti TC\"',\r\n            '\"Microsoft JhengHei\"',\r\n            'sans-serif',\r\n            '\"Apple Color Emoji\"',\r\n            '\"Segoe UI Emoji\"',\r\n            '\"Segoe UI Symbol\"',\r\n        ].join(','),\r\n        h3: {\r\n            fontWeight: '500'\r\n        }, \r\n        h4: {\r\n            marginTop: '40px',\r\n            marginBottom: '16px',\r\n            fontWeight: '500'\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst useStyles = makeStyles({\r\n    googleMap: {\r\n        width: '100%',\r\n        height: '100%',\r\n        cursor: 'initial',\r\n        '& div': {\r\n            zIndex: '0',\r\n        },\r\n    },\r\n});\r\n\r\nfunction GoogleMap({ children, ...props }) {\r\n    const classes = useStyles()\r\n    return (\r\n        <div className={classes.googleMap}>\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{\r\n                    key: \"AIzaSyDU6n5BvjKz-itsG7Epkf-TOp6BfTG7E2o\",\r\n                }}\r\n                options={{\r\n                    draggableCursor: 'initial'\r\n                }}\r\n                {...props}\r\n            >\r\n                {children}\r\n            </GoogleMapReact>\r\n        </div>\r\n    )\r\n}\r\n\r\nGoogleMap.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.node,\r\n        PropTypes.arrayOf(PropTypes.node),\r\n    ]),\r\n};\r\n\r\nGoogleMap.defaultProps = {\r\n    children: null,\r\n};\r\n\r\nexport default GoogleMap;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Carousel } from 'react-responsive-carousel';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        width: '345px',\r\n        maxWidth: '100vw',\r\n        // position: 'relative',\r\n        // zIndex: '5000',\r\n        // right: '170px',\r\n\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nfunction TreeInfoWindow({ tree, onLearnMoreClick }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    function handleLearnMoreClick() {\r\n        onLearnMoreClick(tree)\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <Carousel\r\n                width=\"345\"\r\n                showStatus={false}\r\n                showThumbs={false}\r\n            >\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://source.unsplash.com/345x200/?tree?${tree.id + 1}`}\r\n                    title={tree.chineseTreeName}\r\n                />\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://source.unsplash.com/345x200/?tree?${tree.id + 2}`}\r\n                    title={tree.chineseTreeName}\r\n                />\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://source.unsplash.com/345x200/?tree?${tree.id + 3}`}\r\n                    title={tree.chineseTreeName}\r\n                />\r\n            </Carousel>\r\n            <CardContent>\r\n                <Typography variant=\"outline\">\r\n                    {tree.growthFrom}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\">\r\n                    {tree.chineseTreeName + \" \" + tree.englishTreeName.split(',')[0]}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    {`${tree.chineseTreeName}是一種${tree.growthFrom}，樹必定會成為未來世界的新標準。 我們不得不面對一個非常尷尬的事實，那就是，領悟其中的道理也不是那麼的困難。`}\r\n                </Typography>\r\n\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                    保護我\r\n                </Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    onClick={handleLearnMoreClick}\r\n                >\r\n                    了解更多\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nTreeInfoWindow.propTypes = {\r\n    tree: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        chineseTreeName: PropTypes.string,\r\n        englishTreeName: PropTypes.string,\r\n        scientificTreeName: PropTypes.string,\r\n        growthFrom: PropTypes.string,\r\n        season: PropTypes.string,\r\n        isCommon: PropTypes.bool,\r\n    }).isRequired,\r\n};\r\n\r\nTreeInfoWindow.defaultProps = {\r\n    tree: {\r\n        id: 0,\r\n        chineseTreeName: '克利巴椰子',\r\n        englishTreeName: 'Giriba Palm, Queen Palm',\r\n        scientificTreeName: 'Syagrus romanzoffiana',\r\n        growthFrom: '喬木',\r\n        season: 'spring',\r\n        isCommon: true,\r\n    }\r\n};\r\nexport default TreeInfoWindow","import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport TreeInfoWindow from './TreeInfoWindow'\r\nimport PropTypes from 'prop-types';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport NatureIcon from '@material-ui/icons/Nature'\r\n\r\nconst useStyles = makeStyles({\r\n\r\n    marker: {\r\n        cursor: 'pointer',\r\n    },\r\n})\r\n\r\n// Marker component\r\nfunction TreeMarker({ show, tree, onLearnMoreClick }) {\r\n    const classes = useStyles()\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [open, setOpen] = useState(false);\r\n    const id = open ? 'transitions-popper' : undefined;\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n        setOpen(true)\r\n        onLearnMoreClick(tree)\r\n    };\r\n    const handleMouseEnter = (event) => {\r\n        setAnchorEl(event.currentTarget)\r\n        setOpen(true)\r\n    }\r\n    const handleMouseLeave = (event) => {\r\n        setAnchorEl(null)\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onMouseLeave={handleMouseLeave}\r\n        >\r\n            <NatureIcon\r\n                className={classes.marker}\r\n                color={open ? \"secondary\" : \"primary\"}\r\n                onClick={handleClick}\r\n                onMouseEnter={handleMouseEnter}\r\n\r\n\r\n            />\r\n\r\n            <Popper id={id} open={open} anchorEl={anchorEl} transition={true}>\r\n                {({ TransitionProps }) => (\r\n                    <Fade {...TransitionProps} >\r\n                        <div>\r\n                            <TreeInfoWindow\r\n                                tree={tree}\r\n                                onMouseLeave={handleMouseLeave}\r\n                                onLearnMoreClick={onLearnMoreClick}\r\n                            />\r\n                        </div>\r\n                    </Fade>\r\n                )}\r\n            </Popper>\r\n        </div>\r\n    );\r\n};\r\n\r\nTreeMarker.propTypes = {\r\n    show: PropTypes.bool.isRequired,\r\n    place: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        formatted_address: PropTypes.string,\r\n        rating: PropTypes.number,\r\n        types: PropTypes.array,\r\n        price_level: PropTypes.number,\r\n        opening_hours: PropTypes.object,\r\n    }).isRequired,\r\n};\r\n\r\n\r\nexport default TreeMarker","import React, { useState, useEffect } from 'react';\r\nimport isEmpty from 'lodash.isempty';\r\n\r\n// examples:\r\nimport GoogleMap from './GoogleMap';\r\n\r\n// component\r\n\r\n// my component\r\nimport TreeMarker from './TreeMarker'\r\n\r\nconst ntuLocation = {\r\n    center: {\r\n        lat: 25.017319,\r\n        lng: 121.538977\r\n    },\r\n    zoom: 16,\r\n}\r\nconst NTU_CENTER = [25.017319, 121.538977]\r\n\r\nfunction MarkerInfoWindowMap({ onLearnMoreClick }) {\r\n    const [places, setPlaces] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch('ntu-tree-map-demo/trees.json')\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                data.results.forEach((result) => {\r\n                    result.show = false; // eslint-disable-line no-param-reassign\r\n                    result.lat = ntuLocation.center.lat + (Math.random() - 0.5) * 0.01\r\n                    result.lng = ntuLocation.center.lng + (Math.random() - 0.5) * 0.01\r\n                });\r\n                setPlaces(data.results)\r\n            });\r\n    }, [])\r\n\r\n    // onChildClick callback can take two arguments: key and childProps\r\n    function onChildClickCallback(key) {\r\n        const index = places.findIndex(e => e.id === key);\r\n        let newPlaces = places\r\n        newPlaces[index].show = !newPlaces[index].show; // eslint-disable-line no-param-reassign\r\n        setPlaces(newPlaces)\r\n    };\r\n\r\n    function onChildMouseEnterCallback(key) {\r\n        const index = places.findIndex(e => e.id === key);\r\n        let newPlaces = places\r\n        newPlaces[index].show = true // eslint-disable-line no-param-reassign\r\n        console.log(newPlaces)\r\n        setPlaces(newPlaces)\r\n    };\r\n\r\n    function onChildMouseLeaveCallback(key) {\r\n        const index = places.findIndex(e => e.id === key);\r\n        let newPlaces = places\r\n        newPlaces[index].show = false // eslint-disable-line no-param-reassign\r\n        console.log(newPlaces)\r\n        setPlaces(newPlaces)\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {!isEmpty(places) && (\r\n                <GoogleMap\r\n                    defaultZoom={ntuLocation.zoom}\r\n                    defaultCenter={NTU_CENTER}\r\n                >\r\n                    {places.map(place =>\r\n                        (<TreeMarker\r\n                            key={place.id}\r\n                            lat={place.lat}\r\n                            lng={place.lng}\r\n                            show={place.show}\r\n                            tree={place}\r\n                            onLearnMoreClick={onLearnMoreClick}\r\n                        />))}\r\n                </GoogleMap>\r\n            )}\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MarkerInfoWindowMap;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function TreeAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    臺大樹語\r\n                    </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    speedDial: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.speedDial + 1,\r\n        pointerEvents: 'none',\r\n    },\r\n}));\r\n\r\nconst speedDialSelected = {\r\n    zIndex: 1052,\r\n}\r\n\r\nexport default function SpeedDials({ icon, actions }) {\r\n    const classes = useStyles();\r\n    const [direction, setDirection] = React.useState('right');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [hidden, setHidden] = React.useState(false);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    function FABChildren() {\r\n        return (\r\n            <h5>\r\n                sdfsd\r\n            </h5>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Backdrop\r\n                className={classes.backdrop}\r\n                open={open}\r\n            />\r\n            <SpeedDial\r\n                ariaLabel=\"SpeedDial example\"\r\n                className={classes.speedDial}\r\n                style={open ? speedDialSelected : null}\r\n                hidden={hidden}\r\n                icon={icon}\r\n                onClose={handleClose}\r\n                onOpen={handleOpen}\r\n                open={open}\r\n                direction={direction}\r\n                FabProps={{\r\n                    variant: true ? \"extended\" : \"round\",\r\n                    children: \"asdsadasd\",\r\n                    color: 'primary',\r\n                }}\r\n            >\r\n                {actions.map((action) => (\r\n                    <SpeedDialAction\r\n                        key={action.name}\r\n                        icon={action.icon}\r\n                        tooltipTitle={action.name}\r\n                        onClick={handleClose}\r\n                    />\r\n                ))}\r\n            </SpeedDial>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nSpeedDials.defaultProps = {\r\n    actions: [],\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// components\r\nimport NatureIcon from '@material-ui/icons/NatureOutlined'\r\nimport LocationCityIcon from '@material-ui/icons/LocationCityOutlined';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\n// season icons\r\nimport EcoIcon from '@material-ui/icons/EcoOutlined';\r\nimport SpaIcon from '@material-ui/icons/SpaOutlined';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunnyOutlined';\r\nimport AcUnitIcon from '@material-ui/icons/AcUnitOutlined';\r\n\r\nimport Zoom from '@material-ui/core/Zoom';\r\n\r\n// my components\r\nimport SpeedDials from './SpeedDials'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        zIndex: 100,\r\n        color: '#ffffff',\r\n    },\r\n    floatingNavgationBar: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        position: 'absolute',\r\n        marginTop: theme.spacing(2),\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n\r\n}));\r\n\r\nexport default function FloatingNavgationBar() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false)\r\n\r\n    return (\r\n        <div className={classes.floatingNavgationBar}>\r\n            <Zoom\r\n                in={true}\r\n            >\r\n                <Fab variant=\"extended\" color=\"primary\" aria-label=\"add\" className={classes.title}>\r\n                    <NatureIcon />\r\n                    台大樹語\r\n                </Fab>\r\n            </Zoom>                    \r\n            <SpeedDials\r\n                icon={<NatureIcon color=\"secondary\" />}\r\n                actions={[\r\n                    { icon: <NatureIcon color=\"primary\" />, name: '大王椰子' },\r\n                    { icon: <NatureIcon color=\"primary\" />, name: '樟樹' },\r\n                    { icon: <NatureIcon color=\"primary\" />, name: '白千層' },\r\n                    { icon: <NatureIcon color=\"primary\" />, name: '正榕' },\r\n                    { icon: <NatureIcon color=\"primary\" />, name: '臺灣欒樹' },\r\n                ]}\r\n            />\r\n            <SpeedDials\r\n                icon={<EcoIcon color=\"secondary\" />}\r\n                actions={[\r\n                    { icon: <SpaIcon color=\"primary\" />, name: '春天' },\r\n                    { icon: <WbSunnyIcon color=\"primary\" />, name: '夏天' },\r\n                    { icon: <EcoIcon color=\"primary\" />, name: '秋天' },\r\n                    { icon: <AcUnitIcon color=\"primary\" />, name: '冬天' },\r\n                ]}\r\n            />\r\n            <SpeedDials\r\n                icon={<LocationCityIcon color=\"secondary\" />}\r\n                actions={[\r\n                    { icon: <SpaIcon color=\"primary\" />, name: '春天' },\r\n                    { icon: <WbSunnyIcon color=\"primary\" />, name: '夏天' },\r\n                    { icon: <EcoIcon color=\"primary\" />, name: '秋天' },\r\n                    { icon: <AcUnitIcon color=\"primary\" />, name: '冬天' },\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// components\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Container from '@material-ui/core/Container'\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\n\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Carousel } from 'react-responsive-carousel';\r\n\r\n// my components\r\nimport SpeedDials from './SpeedDials'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    detail: {\r\n        marginTop: theme.spacing(2),\r\n        width: 400,\r\n    },\r\n    media: {\r\n        paddingBottom: 225,\r\n        height: 225,\r\n\r\n    },\r\n    divider: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n\r\n\r\n}));\r\n\r\nexport default function TreeDetail({ tree }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <Carousel\r\n                width=\"400px\"\r\n                height=\"225px\"\r\n                showStatus={false}\r\n                showThumbs={false}\r\n            >\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://source.unsplash.com/345x200/?tree?${tree.id + 1}`}\r\n                    title={tree.chineseTreeName}\r\n                />\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://source.unsplash.com/345x200/?tree?${tree.id + 2}`}\r\n                    title={tree.chineseTreeName}\r\n                />\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://source.unsplash.com/345x200/?tree?${tree.id + 3}`}\r\n                    title={tree.chineseTreeName}\r\n                />\r\n            </Carousel>\r\n\r\n            <Container\r\n                className={classes.detail}\r\n                role=\"presentation\"\r\n            >\r\n                <Typography gutterBottom variant=\"h5\">\r\n                    {tree.chineseTreeName + \" \" + tree.englishTreeName.split(',')[0]}\r\n                </Typography>\r\n\r\n                <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n                    {`${tree.chineseTreeName}是一種${tree.growthFrom}，樹必定會成為未來世界的新標準。 我們不得不面對一個非常尷尬的事實，那就是，領悟其中的道理也不是那麼的困難。`}\r\n                </Typography>\r\n                \r\n                <Divider className={classes.divider} />\r\n\r\n                <Typography variant=\"subtitle2\">\r\n                    樹木資訊\r\n                    </Typography>\r\n                <List dense aria-label=\"tree-detail\">\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <InboxIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={treePlaceholder.co} />\r\n                    </ListItem>\r\n                    <ListItem >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={`調查時間：${treePlaceholder.createTime}`}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={`樹高：${treePlaceholder.treeHeight}`}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={`樹冠幅：${treePlaceholder.treeCrownHeight}`}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={`胸徑：${treePlaceholder.treePath}`}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={`周長：${treePlaceholder.treePerimeter}`}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n\r\n                <Divider className={classes.divider} />\r\n\r\n                <Typography variant=\"subtitle2\">\r\n                    樹種小百科\r\n                </Typography>\r\n                <List aria-label=\"tree-catagory-info\">\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <InboxIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={tree.growthFrom}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary=\"英文名\"\r\n                            secondary={tree.englishTreeName}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary=\"學名\"\r\n                            secondary={tree.scientificTreeName}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n\r\n\r\n\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nconst treePlaceholder = {\r\n    id: 0,\r\n    chineseTreeName: '克利巴椰子',\r\n    englishTreeName: 'Giriba Palm, Queen Palm',\r\n    scientificTreeName: 'Syagrus romanzoffiana',\r\n    growthFrom: '喬木',\r\n    season: 'spring',\r\n    isCommon: true,\r\n    co: \"N 1-10_0205\",\r\n    createTime: \"2012-05-06T02:23:11.000Z\",\r\n    treeHeight: \"11.24\",\r\n    treeCrownHeight: \"11.4728\",\r\n    treePath: \"29.921\",\r\n    treePerimeter: \"94\",\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\n\r\n\r\n// my components\r\nimport TreeDetail from './TreeDetail'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   \r\n}))\r\n\r\nexport default function TreeDetailDrawer({ open, onClose, tree }) {\r\n    const classes = useStyles();\r\n    const [state, setState] = React.useState({\r\n        top: false,\r\n        left: false,\r\n        bottom: false,\r\n        right: false,\r\n    });\r\n\r\n    const toggleDrawer = (anchor, open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setState({ ...state, [anchor]: open });\r\n    };\r\n\r\n    if (tree === null) {\r\n        return <></>\r\n    }\r\n    return (\r\n        <div>\r\n            <Drawer anchor=\"left\" open={open} onClose={onClose}>\r\n                <TreeDetail tree={tree} />\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}\r\n\r\nTreeDetailDrawer.propTypes = {\r\n    tree: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        chineseTreeName: PropTypes.string,\r\n        englishTreeName: PropTypes.string,\r\n        scientificTreeName: PropTypes.string,\r\n        growthFrom: PropTypes.string,\r\n        season: PropTypes.string,\r\n        isCommon: PropTypes.bool,\r\n    }).isRequired,\r\n};\r\n\r\nTreeDetailDrawer.defaultProps = {\r\n    tree: {\r\n        id: 0,\r\n        chineseTreeName: '克利巴椰子',\r\n        englishTreeName: 'Giriba Palm, Queen Palm',\r\n        scientificTreeName: 'Syagrus romanzoffiana',\r\n        growthFrom: '喬木',\r\n        season: 'spring',\r\n        isCommon: true,\r\n        co: \"N 1-10_0205\",\r\n        createTime: \"2012-05-06T02:23:11.000Z\",\r\n        treeHeight: \"11.24\",\r\n        treeCrownHeight: \"11.4728\",\r\n        treePath: \"29.921\",\r\n        treePerimeter: \"94\",\r\n    }\r\n};","import React, { useState } from 'react';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport theme from './theme'\r\n\r\n// style\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// components \r\nimport Box from '@material-ui/core/Box'\r\n\r\n// my components\r\nimport MarkerInfoWindowMap from './components/MarkerInfoWindowMap';\r\nimport TreeAppBar from './components/TreeAppBar'\r\nimport FloatingNavgationBar from './components/FloatingNavgationBar'\r\nimport TreeDetailDrawer from './components/TreeDetailDrawer'\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\twidth: '100vw',\r\n\t\theight: '100vh',\r\n\t},\r\n\tmain: {\r\n\t\twidth: '100%',\r\n\t\theight: '100%',\r\n\t}\r\n});\r\n\r\nfunction App() {\r\n\tconst classes = useStyles()\r\n\tconst [drawerOpen, setDrawerOpen] = useState(false)\r\n\tconst [selectedTree, setSelectedTree] = useState(null)\r\n\r\n\tfunction openTreeDetail(tree) {\r\n\t\tconsole.log(tree)\r\n\t\tsetDrawerOpen(true)\r\n\t\tsetSelectedTree(tree)\r\n\t}\r\n\treturn (\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<Box className={classes.root}>\r\n\t\t\t\t{/* <TreeAppBar /> */}\r\n\t\t\t\t<Box className={classes.main} component=\"main\">\r\n\t\t\t\t\t<FloatingNavgationBar />\r\n\t\t\t\t\t<MarkerInfoWindowMap onLearnMoreClick={openTreeDetail} />\r\n\t\t\t\t\t<TreeDetailDrawer\r\n\t\t\t\t\t\topen={drawerOpen}\r\n\t\t\t\t\t\tonClose={() => setDrawerOpen(false)}\r\n\t\t\t\t\t\ttree={selectedTree}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Box>\r\n\t\t\t</Box>\r\n\t\t</ThemeProvider>\r\n\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}